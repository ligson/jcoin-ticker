name: BuildAndPackage

on:
  push:
    tags:
      - '*'

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
permissions:
  contents: write

jobs:
  # 构建作业 - 多系统并行构建
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: v22.21.0

      - name: Install dependencies
        run: yarn install && yarn global add electron-builder

      - name: Build Electron app
        run: yarn build  # 使用 electron-builder 构建
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 明确传递默认 Token

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: release/

  # 发布作业 - 依赖构建完成后再执行
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: List downloaded files
        run: |
          ls -la downloaded-artifacts/
          find downloaded-artifacts/ -name "*.AppImage" -o -name "*.dmg" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Windows assets
        uses: actions/upload-release-asset@v1
        if: exists('downloaded-artifacts/build-artifacts-windows-latest')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloaded-artifacts/build-artifacts-windows-latest/*.exe
          asset_name: jcoin-ticker-windows-installer.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS assets
        uses: actions/upload-release-asset@v1
        if: exists('downloaded-artifacts/build-artifacts-macos-latest')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloaded-artifacts/build-artifacts-macos-latest/*.dmg
          asset_name: jcoin-ticker-macos-installer.dmg
          asset_content_type: application/octet-stream

      - name: Upload Linux assets
        uses: actions/upload-release-asset@v1
        if: exists('downloaded-artifacts/build-artifacts-ubuntu-latest')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloaded-artifacts/build-artifacts-ubuntu-latest/*.AppImage
          asset_name: jcoin-ticker-linux-installer.AppImage
          asset_content_type: application/octet-stream

